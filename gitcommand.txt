--------------Config and initiate-----------
git config user.name
git config user.email
git config --global user.name "yTP16"
git config --global user.email "sy@"

git init: initiate a git repositoty
git add: stage the file
git commit -m "yourComment": commit your the staged files

--------------check workspace status-----------
git status: check the file status
git diff readme.txt: check read.txt changes with last commit
git diff HEAD -- <file>

--------------Check log info/restore and discard-----------
git log
git log --pretty=onelie: check your commit logs
git reflog: check you commit history
git reset --hard HEAD~3: reset the head to the last third changes
git reset --hard versionCode: change the head to versionCode submmit

git restore <file>: to discard changes in the working directory
git restore --staged <file>: to unstage <file>

Discard changes for unstaged files: git restore <files>
Discard changes for staged files: git restore --staged <files> + git restore <files>

remove files:
rm <files>
git rm <files> : use git restore --staged <files> + git restore <files> to discard rm
git commit -m "rm <files>"

--------------gen SSH and link local to a remote repository-----------
generate SSH key using git bash
ssh-keygen -t rsa -C "sypmay@gmail.com"
add the key in id_rsa.pub to your github account
creat a git repository in github

link a local git repository to the remote:
git remote add origin git@github.com:Zhangwusan3/learngit2.git

--------------git push-----------
push local repository to the remote(local master branch to remote origin/master):
git push -u origin master
change branch name:
git branch -M main

push local commit to remote:
git push origin master

--------------git remote -v/rm -----------
git remote -v: check remote repository info
git remote rm origin: unlink local and remote repository

Clone a remote repositoy from github

--------------git clone-----------
git clone git@github.com:Zhangwusan3/QWidgetOCT.git

--------------git branch fast-forward(ff) merge-----------
git branch dev:create a dev branch
git switch/checkout dev: change to dev branch
git checkout -b dev/git switch -c dev: creat and switch to dev branch

after work at dev branch and commit the changes to dev:
git switch main/master
git merge dev: fast-forward merge 
git branc: check branch info.
git branch -d dev: delete dev branch

--------------git branch dev and manually merge-----------
git switch -c feature1
-work on feature1 branch and commit changes: "AND simple"
git switch main
-work on main branch and commit changes:"& simple"
git merge feature1: will be failed because blabla
-open the conflicted files and manually fix them
git add <conflict files>+git commit -m "feature1 conflicts fixed"
-the conflict will be fixed
git branch -d feature1
-delete the feature1 branch
git log --gragh --pretty=oneline --abbrev-commit
-to check the merged log

--------------git branch merge with --no-ff-----------
git switch -c dev
-creat dev and commit changes on dev branch
git switch main
git merge --no-ff -m "merge with no-ff" dev
-switch back main and merge dev with no-ff using a comment to log
git log --graph --pretty=oneline --abbrev-commit
-check the graphic dev log, where the --no-ff merge has a log

--------------git branch rm and restore-----------
git branch -d dev
-delet dev branch
git reflog
-check dev commit index
git switch -c dev <dev commit index>/git checkout -b dev <dev commit index>
-git branch restore

--------------git bug branch and stash/cherry-pick-----------
-you are in dev branch with unfinished task ongoing and you are required to fix bug 101 for main branch
git stash: save current work to a stash space
git switch main
git switch -c issue-101
--switch main and creat issue-101 branch; then work on issue-101 to fix bug 101 and commit changes to issue-101 branch
git switch main
git merge --no-ff -m "merged bug fix 101" issue-101
--switch to main and merge fixed bug 101 from issue-101 with --no-ff
git switch dev
git stash list
git stash pop/git stash apply stash@{0} ++ git stash drop (to del stashed)
---switch back to dev and restore the previous work from stash space
git stash
git cherry-pick <issue-101 commit index>
-replicate the fixed bug to dev branch{before replicate the fix use git stash to save the current work and ensure the status to be clean}

--------------git delete unmerged branch-----------
-you are working on dev branch and get a task to develop a vulcan feature
git switch -c feature-vulcan
-add a vulcan.py and commit changes at feature-vulcan branch
git switch dev
-switch wo dev, before merging the feature-vulcan to dev you are told to delete the branch feature-vulcan
git branch -D feature-vulcan
-delete the unmerged branch




